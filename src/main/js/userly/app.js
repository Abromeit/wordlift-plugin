// Generated by CoffeeScript 1.3.3
(function() {

  angular.module("userlyApp", ["userly"]).constant("baseUrl", "../wp-content/plugins/wordlift/").constant("consumerKeyOptionName", "wordlift_consumer_key").config([
    "applicationId", "baseUrl", "$httpProvider", "$locationProvider", "$routeProvider", function(applicationId, baseUrl, $httpProvider, $locationProvider, $routeProvider) {
      return $routeProvider.when("/login", {
        templateUrl: "" + baseUrl + "/html/userly/login.html",
        controller: "AuthenticationCtrl"
      }).when("/activate/:activationKey", {
        templateUrl: "" + baseUrl + "/html/userly/activate.html",
        controller: "UserActivationCtrl"
      }).when("/register", {
        templateUrl: "" + baseUrl + "/html/userly/register.html",
        controller: "UserRegistrationCtrl"
      }).otherwise({
        redirectTo: "/login"
      });
    }
  ]).service("WordPressOptionsService", [
    "$http", "$q", "$rootScope", "$log", function($http, $q, $rootScope, $log) {
      return {
        getOption: function(name) {
          var deferred;
          deferred = $q.defer();
          $http({
            method: "GET",
            url: "admin-ajax.php",
            params: {
              action: "wordpress.option",
              name: name
            }
          }).success(function(data, status) {
            return deferred.resolve(data);
          }).error(function(data, status) {
            return deferred.reject(data);
          });
          return deferred.promise;
        },
        setOption: function(name, value) {
          var deferred;
          deferred = $q.defer();
          $http({
            method: "PUT",
            url: "admin-ajax.php",
            params: {
              action: "wordpress.option",
              name: name,
              value: value
            }
          }).success(function(data, status) {
            deferred.resolve(data);
            return $rootScope.$broadcast("WordPressOptionsService.setOption", name, value);
          }).error(function(data, status) {
            return deferred.reject(data);
          });
          return deferred.promise;
        }
      };
    }
  ]).service("SpinnerService", [
    "$log", function($log) {
      return {
        opts: {
          lines: 15,
          length: 25,
          width: 8,
          radius: 28,
          corners: 1,
          rotate: 0,
          color: '#000',
          speed: 1,
          trail: 79,
          shadow: true,
          hwaccel: true,
          className: 'spinner',
          zIndex: 2e9,
          top: 'auto',
          left: 'auto'
        },
        spin: function(elementId) {
          var target;
          target = document.getElementById(elementId);
          return jQuery(target).data("spinner", new Spinner(this.opts).spin(target));
        },
        stop: function(elementId) {
          var target;
          target = document.getElementById(elementId);
          return jQuery(target).data("spinner").stop();
        }
      };
    }
  ]).controller("HomeCtrl", [
    "AuthenticationService", "$scope", "$log", function(AuthenticationService, $scope, $log) {
      return $scope.$on("AuthenticationService.isLoggedIn", function(loggedIn) {
        $log.info("Auth Serv is " + AuthenticationService.isLoggedIn);
        return $scope.isLoggedIn = AuthenticationService.isLoggedIn;
      });
    }
  ]).controller("ConsumerKeyCtrl", [
    "consumerKeyOptionName", "MessageService", "WordPressOptionsService", "$scope", "$log", function(consumerKeyOptionName, MessageService, WordPressOptionsService, $scope, $log) {
      $scope.$on("WordPressOptionsService.setOption", function(event, name, value) {
        if (name === consumerKeyOptionName) {
          return $scope.consumerKey = value;
        }
      });
      $scope.getConsumerKey = function() {
        return WordPressOptionsService.getOption(consumerKeyOptionName).then(function(data) {
          return $scope.consumerKey = data;
        }, function(data) {
          return MessageService.error("An error occurred: " + data.message + "\n(" + data.simpleName + ").");
        });
      };
      $scope.setConsumerKey = function() {
        return WordPressOptionsService.setOption(consumerKeyOptionName, $scope.consumerKey).then(function() {
          $scope.alertClass = "alert-success";
          return $scope.alert = "<strong>Perfect!</strong> Your consumer key has been set.";
        }, function(data) {
          $scope.alertClass = "alert-error";
          return $scope.alert = "<strong>Ooops!</strong> Cannot set the consumer key: " + data.message + "\n<small>(" + data.simpleName + ")</small>.";
        });
      };
      return $scope.getConsumerKey();
    }
  ]).controller("LoginCtrl", [
    "consumerKeyOptionName", "AuthenticationService", "MessageService", "SpinnerService", "WordPressOptionsService", "$scope", "$log", function(consumerKeyOptionName, AuthenticationService, MessageService, SpinnerService, WordPressOptionsService, $scope, $log) {
      return $scope.login = function() {
        var password;
        SpinnerService.spin("loginForm");
        password = $scope.password;
        $scope.password = "";
        return AuthenticationService.login($scope.userName, password).then(function(data) {
          $scope.alertClass = "alert-success";
          $scope.alert = "<strong>Good!</strong> Authentication is successful, you're consumer key has been set and you're ready to go.";
          WordPressOptionsService.setOption(consumerKeyOptionName, data.consumerKey);
          return SpinnerService.stop("loginForm");
        }, function(data) {
          $scope.alertClass = "alert-error";
          $scope.alert = "<strong>Ouch!</strong> Authentication failed: " + data.message + "\n<small>(" + data.simpleName + ")</small>";
          return SpinnerService.stop("loginForm");
        });
      };
    }
  ]).controller("RegisterCtrl", [
    "applicationId", "consumerKeyOptionName", "MessageService", "SpinnerService", "UserRegistrationService", "WordPressOptionsService", "$scope", "$log", function(applicationId, consumerKeyOptionName, MessageService, SpinnerService, UserRegistrationService, WordPressOptionsService, $scope, $log) {
      return $scope.register = function() {
        if ($scope.registerForm.$valid) {
          SpinnerService.spin("registerForm");
          return UserRegistrationService.register({
            application: {
              applicationId: applicationId
            },
            userName: $scope.username,
            password: $scope.password,
            email: $scope.email
          }).then(function(data) {
            $scope.alertClass = "alert-success";
            $scope.alert = "<strong>Good!</strong> Registration is successful, your consumer key has been set and you're ready to go. <strong>Don't forget to activate you're account though</strong>, by clicking the link we sent to your e-mail address.";
            WordPressOptionsService.setOption(consumerKeyOptionName, data.consumerKey);
            return SpinnerService.stop("registerForm");
          }, function(data) {
            $scope.alertClass = "alert-error";
            $scope.alert = "<strong>Ouch!</strong> Registration failed: " + data.message + "\n<small>(" + data.simpleName + ")</small>";
            return SpinnerService.stop("registerForm");
          });
        }
      };
    }
  ]);

}).call(this);
